name: build-release-upload

on:
  push:
    tags: [ 'v*' ]

env:
  CARGO_TERM_COLOR: always
  APP_NAME: websockify-rs

jobs:
  tag:
    runs-on: ubuntu-latest
    steps:
    - name: Short tag
      id: short_tag
      if: ${{ startsWith(github.ref, 'refs/tags/v')  }}
      run: echo "::set-output name=tag::$(basename ${{ github.ref }})"
    outputs:
      tag: ${{ steps.short_tag.outputs.tag }}${{ steps.hash.outputs.tag }}
  
  build:
    runs-on: ${{ matrix.config.os }}
    needs: tag
    strategy:
      matrix: 
        config:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: macos-13
            target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: true
          #        submodules: recursive

    - name: Build
      run: cargo build --release

    - name: Create release zip for UNIX
      if: ${{ matrix.config.os != 'windows-latest' }}
      run: |
          mkdir -p ${{ env.APP_NAME }}-${{ matrix.config.target }}-${{ needs.tag.outputs.tag }}
          cp target/release/${{ env.APP_NAME }} ${{ env.APP_NAME }}-${{ matrix.config.target }}-${{ needs.tag.outputs.tag }}/
          cp README.md ${{ env.APP_NAME }}-${{ matrix.config.target }}-${{ needs.tag.outputs.tag }}/
          cp LICENSE ${{ env.APP_NAME }}-${{ matrix.config.target }}-${{ needs.tag.outputs.tag }}/
          zip -r ${{ env.APP_NAME }}-${{ matrix.config.target }}-${{ needs.tag.outputs.tag }}.zip ${{ env.APP_NAME }}-${{ matrix.config.target }}-${{ needs.tag.outputs.tag }}/

    - name: Create release zip for Windows
      if: ${{ matrix.config.os == 'windows-latest' }}
      run: |
          mkdir ${{ env.APP_NAME }}-${{ matrix.config.target }}-${{ needs.tag.outputs.tag }}
          cp target/release/${{ env.APP_NAME }}.exe ${{ env.APP_NAME }}-${{ matrix.config.target }}-${{ needs.tag.outputs.tag }}/
          cp README.md ${{ env.APP_NAME }}-${{ matrix.config.target }}-${{ needs.tag.outputs.tag }}/
          cp LICENSE ${{ env.APP_NAME }}-${{ matrix.config.target }}-${{ needs.tag.outputs.tag }}/
          Compress-Archive -DestinationPath ${{ env.APP_NAME }}-${{ matrix.config.target }}-${{ needs.tag.outputs.tag }}.zip -Path ${{ env.APP_NAME }}-${{ matrix.config.target }}-${{ needs.tag.outputs.tag }}/

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.APP_NAME }}-${{ matrix.config.target }}-${{ needs.tag.outputs.tag}}.zip
        path: |
              ./${{ env.APP_NAME }}-${{ matrix.config.target }}-${{ needs.tag.outputs.tag }}.zip

              #  release:
              #    needs: [build, tag]
              #    runs-on: ubuntu-latest
              #    if: ${{ startsWith(github.ref, 'refs/tags/v')  }}
              #    steps:
              #      - name: Create release
              #        run: |
              #          gh release create ${{github.ref_name}} --generate-notes ${{github.ref_name}}.zip
              #        env:
              #          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              #        with:
              #          tag_name: ${{ github.ref }}
              #          release_name: Release ${{ needs.tag.outputs.tag }}
              #          draft: false
              #          prerelease: false
              #    outputs:
              #      upload_url: ${{ steps.create_release.outputs.upload_url }}
              #
              #  upload:
              #    needs: [release, tag]
              #    runs-on: ubuntu-latest
              #    if: ${{ startsWith(github.ref, 'refs/tags/v')  }}
              #    strategy:
              #      matrix:  
              #        target:
              #        - x86_64-pc-windows-msvc
              #        - x86_64-apple-darwin
              #        - x86_64-unknown-linux-gnu
              #        - x86_64-unknown-linux-musl
              #        - armv7-unknown-linux-gnueabihf
              #        - aarch64-unknown-linux-gnu
              #        - aarch64-pc-windows-msvc
              #    steps:
              #      - name: Download artifacts
              #        uses: actions/download-artifact@v2
              #        with:
              #          name: ${{ env.APP_NAME }}-${{ matrix.target }}-${{ needs.tag.outputs.tag }}.zip
              #      - name: Upload Release Asset
              #        id: upload-release-asset 
              #        uses: actions/upload-release-asset@v1
              #        env:
              #          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              #        with:
              #          upload_url: ${{ needs.release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
              #          asset_path: ./${{ env.APP_NAME }}-${{ matrix.target }}-${{ needs.tag.outputs.tag }}.zip
              #          asset_name: ${{ env.APP_NAME }}-${{ matrix.target }}-${{ needs.tag.outputs.tag }}.zip
              #          asset_content_type: application/zip
